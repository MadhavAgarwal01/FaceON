import csv
import os
import datetime
from csv import DictReader,DictWriter
from reportlab.lib.units import cm, inch
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import *
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

global ROOT_LOCATION

def gen_report(pre,mo,ye,SAVE_URL):

    #==============================================================================================
    
    print(os.getcwd())
    with open('root.csv','r') as rf:
        csv_reader_root = DictReader(rf,fieldnames = ['ROOT LOCATION'])
        for row in csv_reader_root:
            ROOT_LOCATION = row['ROOT LOCATION']
            os.chdir(ROOT_LOCATION) 
            # print(row['ROOT LOCATION'])


    #==============================================================================================

    if SAVE_URL == "":
        os.chdir(ROOT_LOCATION)
        return "ENTER SAVE LOCATION !"

    present = pre.lower()
    month = mo.title()
    year = ye

    fname2 = present + f"_{month}_{year}" + "_FINAL.csv"
    fname4 = present + f"_{month}_{year}" + "_PAYROLL.csv"
    fname6 = present + f"_{month}_{year}" + "_REPORT.pdf"

    FA = os.path.join(os.getcwd(),f"ATTENDANCE\{present}")
    PA = os.path.join(os.getcwd(),f"PAYROLL\{present}")

    F_ADD = os.path.join(FA,fname2)
    P_ADD = os.path.join(PA,fname4)
    R_ADD = os.path.join(SAVE_URL,fname6)

    # print(F_ADD)
    # print(P_ADD)
    # print(R_ADD)

    pay_dict = {}

    if os.path.isfile(F_ADD) or os.path.isfile(P_ADD):

        # Data from PAYROLL CSV 
        with open(F_ADD, "r") as csvfile:
            data = list(csv.reader(csvfile))

        # Data from ATTENDANCE CSV
        with open(P_ADD, "r") as rf:
            csv_reader = DictReader(rf,fieldnames=['DAYS_PRESENT','DAYS_ABSENT','LEAVES','LEAVES_PRESENT','TOTAL_PAY','NET_PAY','PF'])
            for row in csv_reader:
                pay_dict = list(row.items())
    else:
        os.chdir(ROOT_LOCATION)
        return "GENERATE PAYROLL FIRST !"

    elements = []

    # PDF Text
    # PDF Text - Styles
    styles = getSampleStyleSheet()
    styleNormal = styles['Normal']

    # PDF Text - Content
    line1 = 'TESLA MOTORS'
    line2 = 'Date: {}'.format(datetime.datetime.now().strftime("%d-%m-%y"))
    line3 = 'PAYROLL CUM ATTENDANCE REPORT'
    line4 = f'EMPLOYEE NAME : {present.upper()}'
    line5 = f'MONTH & YEAR : {month},{year}'
    line7 = '*This is a combined payroll and attendance report generated by the system.'

    elements.append(Paragraph(line1, ParagraphStyle(styleNormal,fontSize=20,firstLineIndent=5)))
    elements.append(Spacer(inch, .25 * inch))
    elements.append(Paragraph(line2, ParagraphStyle(styleNormal,fontSize=10,firstLineIndent=5)))
    elements.append(Spacer(inch, .15 * inch))
    elements.append(Paragraph(line3, ParagraphStyle(styleNormal,fontSize=12,firstLineIndent=150)))
    elements.append(Spacer(inch, .25 * inch))
    elements.append(Paragraph(line4, ParagraphStyle(styleNormal,fontSize=10,firstLineIndent=5)))
    elements.append(Spacer(inch, .15 * inch))
    elements.append(Paragraph(line5, ParagraphStyle(styleNormal,fontSize=10,firstLineIndent=5)))
    elements.append(Spacer(inch, .15 * inch))

    # PDF Table - DETAILS
    tbl_data = [
                [Paragraph(f'DAYS PRESENT : {pay_dict[0][1]}', styles["Normal"]),    Paragraph(f"DAYS ABSENT : {pay_dict[1][1]}", styles["Normal"]),   Paragraph(f"LEAVES TAKEN : {pay_dict[2][1]}", styles["Normal"]),    Paragraph(f"LEAVES PRESENT : {pay_dict[3][1]}", styles["Normal"])],
                [Paragraph(f'GROSS PAY    : Rs.{pay_dict[4][1]}', styles["Normal"]), Paragraph(f"PF          : Rs.{pay_dict[6][1]}", styles["Normal"]),Paragraph(f"NET PAY      : Rs.{pay_dict[5][1]}", styles["Normal"])]
               ]
    tbl = Table(tbl_data)
    elements.append(tbl)
    elements.append(Spacer(inch, .15 * inch))
    elements.append(Paragraph('_____________________________________________________________________________________________', styles["Normal"]))

    # PDF Table
    # PDF Table - Styles
    # [(start_column, start_row), (end_column, end_row)]

    all_cells = [(0, 0), (-1, -1)]
    header = [(0, 0), (-1, 0)]
    column0 = [(0, 0), (0, -1)]
    column1 = [(1, 0), (1, -1)]
    column2 = [(2, 0), (2, -1)]
    footer = [(0, -1), (-1, -1)]


    table_style = TableStyle([
        ('VALIGN', all_cells[0], all_cells[1], 'TOP'),
        ('LINEBELOW', header[0], header[1], 1, colors.black),
        ('ALIGN', column0[0], column0[1], 'CENTER'),
        ('ALIGN', column1[0], column1[1], 'CENTER'),
        ('ALIGN', column2[0], column2[1], 'CENTER'),
        ('LINEBELOW', footer[0], footer[1], 1, colors.black),
    ])

    # PDF Table - Column Widths
    colWidths = [
        6 * cm,  # Column 0
        6 * cm,  # Column 1
        6 * cm,  # Column 2
    ]

    # PDF Table - Strip '[]() and add word wrap to column 5
    for index, row in enumerate(data):
        for col, val in enumerate(row):
            if col != 5 or index == 0:
                data[index][col] = val.strip("'[]()")
            else:
                data[index][col] = Paragraph(val, styles['Normal'])

    # Add table to elements
    t = Table(data, colWidths=colWidths)
    t.setStyle(table_style)
    elements.append(t)
    elements.append(Paragraph(line7, ParagraphStyle(styleNormal,fontSize=9,firstLineIndent=210)))

    # Generate PDF
    archivo_pdf = SimpleDocTemplate(
        R_ADD,
        pagesize=letter,
        rightMargin=40,
        leftMargin=40,
        topMargin=28,
        bottomMargin=28)
    archivo_pdf.build(elements)


    os.chdir(ROOT_LOCATION)
    return 'COMBINED REPORT GENERATED !'
